{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\"use strict\"\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'TUNNELTEXT/MAIN'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\nrainbow                   = CND.rainbow.bind CND\n{ jr, }                   = CND\nMultimix                  = require 'multimix'\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n### from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions ###\nesc_re = ( text ) -> text.replace /[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"\n\n\n#===========================================================================================================\nclass @Tunneltext extends Multimix\n  # @extend   object_with_class_properties\n  # @include require './cataloguing'\n  # @include require './sizing'\n  # @include require './declaring'\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( chrs = '\\x10\\x11\\x12\\x13\\x14' ) ->\n    super()\n    validate.tunneltext_chrs chrs\n    @chrs                 = Array.from chrs\n    #.......................................................................................................\n    @chr_count            = @chrs.length\n    @delta                = ( @chr_count + 1 ) / 2 - 1\n    @master               = @chrs[ @chr_count - @delta - 1 ]\n    @meta_chr_patterns    = ( /// #{esc_re @chrs[ idx ]} ///gu            for idx in [ 0 .. @delta ] )\n    @target_seq_chrs      = ( \"#{@master}#{@chrs[ idx + @delta ]}\"        for idx in [ 0 .. @delta ] )\n    @target_seq_patterns  = ( /// #{esc_re @target_seq_chrs[ idx ]} ///gu for idx in [ 0 .. @delta ] )\n    @cloaked              = @chrs[ 0 ... @delta ]\n    @tunnels              = []\n\n    # debug 'µhd', '@delta:                ', rpr @delta\n    # debug 'µhd', '@master:               ', rpr @master\n    # debug 'µhd', '@meta_chr_patterns:    ', rpr @meta_chr_patterns\n    # debug 'µhd', '@target_seq_chrs:      ', rpr @target_seq_chrs\n    # debug 'µhd', '@target_seq_patterns:  ', rpr @target_seq_patterns\n    # debug 'µhd', '@cloaked:              ', rpr @cloaked\n\n  #---------------------------------------------------------------------------------------------------------\n  hide: ( text ) ->\n    R = text\n    for idx in [ @delta .. 0 ] by -1\n      R = R.replace @meta_chr_patterns[ idx ], @target_seq_chrs[ idx ]\n    for tunnel in @tunnels\n      R = tunnel.hide R\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  reveal: ( text ) ->\n    R = text\n    for idx in [ 0 .. @delta ] by +1\n      R = R.replace @target_seq_patterns[ idx ], @chrs[ idx ]\n    for idx in [ @tunnels.length - 1 .. 0 ] by -1\n      R = @tunnels[ idx ].reveal R\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  revert: ( text ) ->\n    R = @reveal text\n    for idx in [ @tunnels.length - 1 .. 0 ] by -1\n      continue unless ( tunnel = @tunnels[ idx ] ).remove?\n      R = tunnel.remove R\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  add_tunnel: ( tunnel_factory ) ->\n    validate.tunneltext_tunnel_factory             tunnel_factory\n    validate.tunneltext_tunnel          ( tunnel = tunnel_factory @ )\n    @tunnels.push tunnel\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT either abolish tunnel letter (`B` in this case) or pass it in as argument ###\n@tunnels =\n  'backslash': ( tnl ) ->\n    { cloaked } = tnl\n    if cloaked.length < 2 then    start_chr = stop_chr    = cloaked[ 0 ]\n    else                        [ start_chr,  stop_chr, ] = cloaked\n    base = 10\n    ### `oc`: 'original character' ###\n    _oc_backslash      = '\\\\'\n    ### `op`: 'original pattern' ###\n    _oce_backslash     = esc_re _oc_backslash\n    _mcp_backslash     = ///\n      #{esc_re _oc_backslash}\n      ( . ) ///gu\n    _tsp_backslash     = /// #{esc_re start_chr} B ( [ 0-9 a-z ]+ ) #{esc_re stop_chr} ///gu\n    ### `rm`: 'remove' ###\n    _rm_backslash      = /// #{esc_re _oc_backslash} ( . ) ///gu\n    #---------------------------------------------------------------------------------------------------------\n    hide = ( text ) =>\n      R = text\n      R = R.replace _mcp_backslash, ( _, $1 ) ->\n        cid_txt = ( $1.codePointAt 0 ).toString base\n        return \"#{start_chr}B#{cid_txt}#{stop_chr}\"\n      return R\n    #.........................................................................................................\n    reveal = ( text ) =>\n      R = text\n      R = R.replace _tsp_backslash, ( _, $1 ) ->\n        chr = String.fromCodePoint parseInt $1, base\n        return \"#{_oc_backslash}#{chr}\"\n      return R\n    #.........................................................................................................\n    remove = ( text ) =>\n      return text.replace _rm_backslash, '$1'\n    #---------------------------------------------------------------------------------------------------------\n    return { name: 'backslash', hide, reveal, remove, }\n\n\n\n\n"
  ]
}