{
  "version": 3,
  "file": "types.js",
  "sourceRoot": "..",
  "sources": [
    "src/types.coffee"
  ],
  "names": [],
  "mappings": ";AAGA;EAAA;AAAA,MAAA,GAAA,EAAA,SAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;IAAA,oBAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,EAAA,GAA4B,IAAI,CAAC;;EACjC,SAAA,GAA4B,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC;;EACpD,SAAA,GAA4B,IAAI,SAAJ,CAAc,MAAM,CAAC,OAArB,EAhB5B;;;EAoBA,IAAC,CAAA,OAAD,CAAS,qBAAT,EACE;IAAA,KAAA,EACE;MAAA,gBAAA,EAA0C,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ;MAAT,CAA1C;MACA,qCAAA,EAA0C,QAAA,CAAE,CAAF,CAAA;eAAS,CAAM,gBAAN,CAAA,IAAqB,IAAC,CAAA,GAAG,CAAC,iBAAL,CAAuB,CAAC,CAAC,MAAzB;MAA9B;IAD1C;EADF,CADF,EApBA;;;;;;EA4BA,IAAC,CAAA,OAAD,CAAS,sCAAT,EACE;IAAA,KAAA,EACE;MAAA,aAAA,EAAwC,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,IAAL,CAAU,CAAV;MAAT,CAAxC;MACA,qCAAA,EAAwC,QAAA,CAAE,CAAF,CAAA;AACtC,YAAA;QAAA,IAAA,GAAO,IAAC,CAAA,OAAD,CAAS,IAAI,GAAJ,CAAQ,KAAK,CAAC,IAAN,CAAW,CAAX,CAAR,CAAT;AACP,eAAO,CAAE,IAAA,GAAO,CAAT,CAAA,IAAiB,CAAE,IAAA,KAAQ,CAAE,IAAC,CAAA,OAAD,CAAS,CAAT,EAAY,YAAZ,CAAF,CAAV;MAFc;IADxC;EADF,CADF,EA5BA;;;EAoCA,IAAC,CAAA,OAAD,CAAS,mBAAT,EACE;IAAA,KAAA,EACE;MAAA,aAAA,EAAgC,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,IAAL,CAAU,CAAV;MAAT,CAAhC;MACA,6BAAA,EAAgC,QAAA,CAAE,CAAF,CAAA;eAAS,CAAE,IAAI,GAAJ,CAAQ,KAAK,CAAC,IAAN,CAAW,CAAX,CAAR,CAAF,CAAwB,CAAC,IAAzB,KAAiC;MAA1C;IADhC;EADF,CADF,EApCA;;;EA0CA,IAAC,CAAA,OAAD,CAAS,2BAAT,EACE;IAAA,KAAA,EACE;MAAA,cAAA,EAAgC,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,KAAL,CAAW,CAAX;MAAT,CAAhC;MACA,mBAAA,EAAgC,QAAA,CAAE,CAAF,CAAA;eAAS,aAAO,CAAC,CAAC,KAAT,EAAA,GAAA;MAAT;IADhC;EADF,CADF;AA1CA",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'TIMETUNNEL/TYPES'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\njr                        = JSON.stringify\nIntertype                 = ( require 'intertype' ).Intertype\nintertype                 = new Intertype module.exports\n\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'timetunnel_settings',\n  tests:\n    \"x is an object\":                         ( x ) -> @isa.object x\n    \"x.guards may be a timetunnel_guards\":    ( x ) -> ( not x.guards? ) or @isa.timetunnel_guards x.guards\n    ### NOTE tested by `integer-codec` ###\n    # \"x.intalph may be a timetunnel_intalph\":  ( x ) -> ( not x.intalph )? or @isa.timetunnel_intalph x.intalph\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'timetunnel_distinctive_nonempty_chrs',\n  tests:\n    \"x is a text\":                          ( x ) -> @isa.text x\n    \"x has 1 or more distinct codepoints\":  ( x ) ->\n      size = @size_of new Set Array.from x\n      return ( size > 0 ) and ( size is ( @size_of x, 'codepoints' ) )\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'timetunnel_guards',\n  tests:\n    \"x is a text\":                  ( x ) -> @isa.text x\n    \"x has 5 distinct codepoints\":  ( x ) -> ( new Set Array.from x ).size is 5\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'timetunnel_tunnel_pattern',\n  tests:\n    \"x is a regex\":                 ( x ) -> @isa.regex x\n    \"x has global flag\":            ( x ) -> 'g' in x.flags\n\n\n"
  ]
}