{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../../src/tests/basic.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'TIMETUNNEL/TESTS/BASIC'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\njr                        = JSON.stringify\nIC                        = require '../..'\n{ inspect, }              = require 'util'\nxrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\nxrpr2                     = ( x ) -> inspect x, { colors: yes, breakLength: 20, maxArrayLength: Infinity, depth: Infinity, }\n#...........................................................................................................\nTIMETUNNEL                = require '../..'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"basic escaping\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [['abcde','abcdefghxyz'],'cccdcedefghxyz',null,]\n    [['abc',null],null,'not a valid timetunnel_settings',]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ guards, text, ] = probe\n      tnl = new TIMETUNNEL.Timetunnel { guards, }\n      result = tnl.hide text\n      resolve result\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"tunnels: hiding\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [['abcde',['remove_backslash',], 'abcdefghxyz'],'cccdcedefghxyz',null,]\n    [['abcde',['remove_backslash',], 'abc\\\\defghxyz'],'cccdcea0befghxyz',null,]\n    [['abcde',['keep_backslash',], 'abc\\\\defghxyz'],'cccdcea0befghxyz',null,]\n    [['abcde',['keep_backslash',], 'abc\\\\defgh\\\\xyz'],'cccdcea0befgha1byz',null,]\n    [[null,['keep_backslash',], 'abc\\\\defgh\\\\xyz'],'abc\\u00100\\u0011efgh\\u00101\\u0011yz',null,]\n    [['abcde',['remove_backslash','htmlish',], 'abc\\\\def <tag/> ghxyz'],'cccdcea0bef a1b ghxyz',null,]\n    # [['abc',null],null,'not a valid timetunnel_guards',]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ guards, tunnel_names, text, ] = probe\n      tnl = new TIMETUNNEL.Timetunnel { guards, }\n      #.....................................................................................................\n      for tunnel_name in tunnel_names\n        tunnel_factory = TIMETUNNEL.tunnels[ tunnel_name ]\n        tnl.add_tunnel tunnel_factory\n      #.....................................................................................................\n      result = tnl.hide text\n      resolve result\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"tunnels: hiding and revealing\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [['abcde',['remove_backslash',], 'abcdefghxyz'],'abcdefghxyz',null,]\n    [['abcde',['remove_backslash',], 'abcdefghxyz'],'abcdefghxyz',null,]\n    [['abcde',['keep_backslash',], 'abc\\\\defghxyz'],'abc\\\\defghxyz',null,]\n    [[null,['keep_backslash',], 'abc\\\\defgh\\\\xyz'],'abc\\\\defgh\\\\xyz',null,]\n    [['abcde',['remove_backslash','htmlish',], 'abc\\\\def <tag/> ghxyz'],'abcdef <tag/> ghxyz',null,]\n    # [['abc',null],null,'not a valid timetunnel_guards',]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ guards, tunnel_names, text, ] = probe\n      tnl = new TIMETUNNEL.Timetunnel { guards, }\n      #.....................................................................................................\n      for tunnel_name in tunnel_names\n        tunnel_factory = TIMETUNNEL.tunnels[ tunnel_name ]\n        tnl.add_tunnel tunnel_factory\n      #.....................................................................................................\n      result = tnl.reveal tnl.hide text\n      resolve result\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"instantiation: errors\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [['abcde','abc',],null,'not a valid timetunnel_collisionfree_texts',]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ guards, intalph, ]  = probe\n      tnl                   = new TIMETUNNEL.Timetunnel { guards, intalph, }\n      resolve null\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"tunnels: grouping 1\" ] = ( T, done ) ->\n  transform = ( tnl, original_text, message ) ->\n    tunneled_text   = tnl.hide    original_text\n    modified_text   = modify      tunneled_text\n    uncovered_text  = tnl.reveal  modified_text\n    debug 'µ22129', '----------------------------'\n    debug 'µ22129', message\n    debug 'µ22129', '(1)', rpr original_text\n    debug 'µ22129', '(2)', rpr tunneled_text\n    debug 'µ22129', '(3)', rpr modified_text\n    debug 'µ22129', '(4)', rpr uncovered_text\n    return { tunneled_text, modified_text, uncovered_text, }\n  #.........................................................................................................\n  modify = ( text ) ->\n    return text.replace /[0-9]+/g, ( $0 ) ->\n      return '' + ( parseInt $0, 10 ) * 12\n  #.........................................................................................................\n  original_text = 'abcdeABCDE-CC-CD'\n  #.........................................................................................................\n  tnl = new TIMETUNNEL.Timetunnel { guards: 'abCDe', }\n  tnl.add_tunnel ///   \\{ ( [0-9]+ ) \\}   ///gu\n  t = transform tnl, original_text, \"brackets not in group, removed\"\n  T.eq t.tunneled_text,  'CCCDcdeABCeDE-CeCe-CeD'\n  T.eq t.modified_text,  'CCCDcdeABCeDE-CeCe-CeD'\n  T.eq t.uncovered_text, 'abcdeABCDE-CC-CD'\n  #.........................................................................................................\n  tnl = new TIMETUNNEL.Timetunnel { guards: 'abCDe', }\n  tnl.add_tunnel /// ( \\{   [0-9]+   \\} ) ///gu\n  t = transform tnl, original_text, \"brackets in group, not removed\"\n  T.eq t.tunneled_text,  'CCCDcdeABCeDE-CeCe-CeD'\n  T.eq t.modified_text,  'CCCDcdeABCeDE-CeCe-CeD'\n  T.eq t.uncovered_text, 'abcdeABCDE-CC-CD'\n  #.........................................................................................................\n  tnl = new TIMETUNNEL.Timetunnel { guards: 'abCDe', }\n  tnl.add_tunnel /// \\{   [0-9]+   \\} ///gu\n  t = transform tnl, original_text, \"no group, equivalent to all grouped\"\n  T.eq t.tunneled_text,  'CCCDcdeABCeDE-CeCe-CeD'\n  T.eq t.modified_text,  'CCCDcdeABCeDE-CeCe-CeD'\n  T.eq t.uncovered_text, 'abcdeABCDE-CC-CD'\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"tunnels: grouping 2\" ] = ( T, done ) ->\n  transform = ( tnl, original_text, message ) ->\n    tunneled_text   = tnl.hide    original_text\n    modified_text   = modify      tunneled_text\n    uncovered_text  = tnl.reveal  modified_text\n    debug 'µ22129', '----------------------------'\n    debug 'µ22129', message\n    debug 'µ22129', '(1)', rpr original_text\n    debug 'µ22129', '(2)', rpr tunneled_text\n    debug 'µ22129', '(3)', rpr modified_text\n    debug 'µ22129', '(4)', rpr uncovered_text\n    return { tunneled_text, modified_text, uncovered_text, }\n  #.........................................................................................................\n  modify = ( text ) ->\n    return text.replace /[0-9]+/g, ( $0 ) ->\n      return '' + ( parseInt $0, 10 ) * 12\n  #.........................................................................................................\n  original_text = \"abcde A plain number 123, two bracketed ones: {123}, {124}\"\n  guards        = 'abCDe'\n  intalph       = '+-'\n  #.........................................................................................................\n  tnl = new TIMETUNNEL.Timetunnel { guards, intalph, }\n  tnl.add_tunnel ///   \\{ ( [0-9]+ ) \\}   ///gu\n  t = transform tnl, original_text, \"brackets not in group, removed\"\n  T.eq t.tunneled_text,  'CCCDcde A plCCin numCDer 123, two CDrCCcketed ones: a+b, a-b'\n  T.eq t.modified_text,  'CCCDcde A plCCin numCDer 1476, two CDrCCcketed ones: a+b, a-b'\n  T.eq t.uncovered_text, 'abcde A plain number 1476, two bracketed ones: 123, 124'\n  #.........................................................................................................\n  tnl = new TIMETUNNEL.Timetunnel { guards, intalph, }\n  tnl.add_tunnel /// ( \\{   [0-9]+   \\} ) ///gu\n  t = transform tnl, original_text, \"brackets in group, not removed\"\n  T.eq t.tunneled_text,  'CCCDcde A plCCin numCDer 123, two CDrCCcketed ones: a+b, a-b'\n  T.eq t.modified_text,  'CCCDcde A plCCin numCDer 1476, two CDrCCcketed ones: a+b, a-b'\n  T.eq t.uncovered_text, 'abcde A plain number 1476, two bracketed ones: {123}, {124}'\n  #.........................................................................................................\n  tnl = new TIMETUNNEL.Timetunnel { guards, intalph, }\n  tnl.add_tunnel /// \\{   [0-9]+   \\} ///gu\n  t = transform tnl, original_text, \"no group, equivalent to all grouped\"\n  T.eq t.tunneled_text,  'CCCDcde A plCCin numCDer 123, two CDrCCcketed ones: a+b, a-b'\n  T.eq t.modified_text,  'CCCDcde A plCCin numCDer 1476, two CDrCCcketed ones: a+b, a-b'\n  T.eq t.uncovered_text, 'abcde A plain number 1476, two bracketed ones: {123}, {124}'\n  #.........................................................................................................\n  done()\n\n\n\n\n\n############################################################################################################\nunless module.parent?\n  test @\n  # test @[ \"tunnels: hiding\" ]\n  # test @[ \"tunnels: hiding and revealing\" ]\n\n\n"
  ]
}