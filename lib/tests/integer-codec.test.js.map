{
  "version": 3,
  "file": "integer-codec.test.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/integer-codec.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'TIMETUNNEL/TESTS/INTCODEC'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\njr                        = JSON.stringify\nIC                        = require '../..'\n{ inspect, }              = require 'util'\nxrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\nxrpr2                     = ( x ) -> inspect x, { colors: yes, breakLength: 20, maxArrayLength: Infinity, depth: Infinity, }\n#...........................................................................................................\nINTCODEC                  = require '../integer-codec'\n# require '../exception-handler'\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"INTCODEC._convert() 1\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [[\"7\",\"0123456789\",\"01\"],\"111\",null]\n    [[\"0000003\",\"0123456789\",\"0123456789\"],\"3\",null]\n    [[\"000000\",\"0123456789\",\"ZOT\"],\"Z\",null]\n    [[\"8\",\"0123456789\",\"01\"],\"1000\",null]\n    [[\"7\",\"0123456789\",\"AB\"],\"BBB\",null]\n    [[\"8\",\"0123456789\",\"AB\"],\"BAAA\",null]\n    [[\"7\",\"0123456789\",\"ABC\"],\"CB\",null]\n    [[\"7\",\"0123456789\",\"𫝀𫝁𫝂\"],\"𫝂𫝁\",null]\n    [[\"21\",\"123\",\"123\"],\"21\",null]\n    [[\"𫝁𫝀\",\"𫝀𫝁𫝂\",\"123\"],\"21\",null]\n    [[\"25\",\"0123456789\",\"abcdefghijklmnopqrstuvwxyz\"],\"z\",null]\n    [[\"26\",\"0123456789\",\"abcdefghijklmnopqrstuvwxyz\"],\"ba\",null]\n    [[\"27\",\"0123456789\",\"abcdefghijklmnopqrstuvwxyz\"],\"bb\",null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ src, srctable, desttable, ] = probe\n      result = INTCODEC._convert src, srctable, desttable\n      # debug 'µ33348', result\n      resolve result\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"INTCODEC._convert() with errors\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [[\"7\",\"7878\",\"1234\"],null,\"expected a text with two or more distinct characters\"]\n    [[\"7\",\"0123456789\",\"x\"],null,\"expected a text with two or more characters\"]\n    [[\"7\",\"1234\",\"123\"],null,\"number contains illegal digits\"]\n    [[\"xxxxxxx\",\"yz\",\"0123456789\"],null,\"number contains illegal digits\"]\n    [[\"12\",\"3456789\",\".;\"],null,\"number contains illegal digits\"]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ src, srctable, desttable, ] = probe\n      result = INTCODEC._convert src, srctable, desttable\n      # debug 'µ33348', result\n      resolve result\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"INTCODEC.encode()\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [[ 512,'01'],'1000000000']\n    [[ 512,'abcdefghijklmnopqrstuvwxyz'],'ts']\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ src, srctable, desttable, ] = probe\n      result = INTCODEC.encode src, srctable, desttable\n      # debug 'µ33348', result\n      resolve result\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"INTCODEC.decode()\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [[ '10000','01'], 16]\n    [[ '1000000000','01'], 512]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ src, srctable, desttable, ] = probe\n      result = INTCODEC.decode src, srctable, desttable\n      # debug 'µ33348', result\n      resolve result\n  done()\n\n\n\n\n############################################################################################################\nunless module.parent?\n  test @\n  # test @[ \"tunnels: hiding\" ]\n  # test @[ \"tunnels: hiding and revealing\" ]\n\n\n"
  ]
}