// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var CND, IC, TUNNELTEXT, badge, debug, echo, help, info, inspect, jr, rpr, test, urge, warn, whisper, xrpr, xrpr2;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'ICQL/TESTS/MAIN';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  test = require('guy-test');

  jr = JSON.stringify;

  IC = require('../..');

  ({inspect} = require('util'));

  xrpr = function(x) {
    return inspect(x, {
      colors: true,
      breakLength: 2e308,
      maxArrayLength: 2e308,
      depth: 2e308
    });
  };

  xrpr2 = function(x) {
    return inspect(x, {
      colors: true,
      breakLength: 20,
      maxArrayLength: 2e308,
      depth: 2e308
    });
  };

  //...........................................................................................................
  TUNNELTEXT = require('../..');

  // require '../exception-handler'

  //-----------------------------------------------------------------------------------------------------------
  this["basic escaping"] = async function(T, done) {
    var error, i, len, matcher, probe, probes_and_matchers;
    probes_and_matchers = [[['abcde', 'abcdefghxyz'], 'cccdcedefghxyz', null], [['abc', null], null, 'not a valid tunneltext_chrs']];
//.........................................................................................................
    for (i = 0, len = probes_and_matchers.length; i < len; i++) {
      [probe, matcher, error] = probes_and_matchers[i];
      await T.perform(probe, matcher, error, function() {
        return new Promise(function(resolve, reject) {
          var chrs, result, text, tnl;
          [chrs, text] = probe;
          tnl = new TUNNELTEXT.Tunneltext(chrs);
          result = tnl.hide(text);
          return resolve(result);
        });
      });
    }
    return done();
  };

  //-----------------------------------------------------------------------------------------------------------
  this["tunnels: hiding"] = async function(T, done) {
    var error, i, len, matcher, probe, probes_and_matchers;
    probes_and_matchers = [[['abcde', ['backslash'], 'abcdefghxyz'], 'cccdcedefghxyz', null], [['abcde', ['backslash'], 'abc\\defghxyz'], 'cccdceaB100befghxyz', null], [['abcde', ['backslash', 'htmlish'], 'abc\\def <tag/> ghxyz'], 'cccdceaB100bef aT0b ghxyz', null]];
//.........................................................................................................
// [['abc',null],null,'not a valid tunneltext_chrs',]
    for (i = 0, len = probes_and_matchers.length; i < len; i++) {
      [probe, matcher, error] = probes_and_matchers[i];
      await T.perform(probe, matcher, error, function() {
        return new Promise(function(resolve, reject) {
          var chrs, j, len1, result, text, tnl, tunnel_factory, tunnel_name, tunnel_names;
          [chrs, tunnel_names, text] = probe;
          tnl = new TUNNELTEXT.Tunneltext(chrs);
//.....................................................................................................
          for (j = 0, len1 = tunnel_names.length; j < len1; j++) {
            tunnel_name = tunnel_names[j];
            tunnel_factory = TUNNELTEXT.tunnels[tunnel_name];
            tnl.add_tunnel(tunnel_factory);
          }
          //.....................................................................................................
          result = tnl.hide(text);
          return resolve(result);
        });
      });
    }
    return done();
  };

  //-----------------------------------------------------------------------------------------------------------
  this["tunnels: hiding and revealing"] = async function(T, done) {
    var error, i, len, matcher, probe, probes_and_matchers;
    probes_and_matchers = [[['abcde', ['backslash'], 'abcdefghxyz'], 'abcdefghxyz', null], [['abcde', ['backslash'], 'abc\\defghxyz'], 'abc\\defghxyz', null]];
//.........................................................................................................
// [['abc',null],null,'not a valid tunneltext_chrs',]
    for (i = 0, len = probes_and_matchers.length; i < len; i++) {
      [probe, matcher, error] = probes_and_matchers[i];
      await T.perform(probe, matcher, error, function() {
        return new Promise(function(resolve, reject) {
          var chrs, j, len1, result, text, tnl, tunnel_factory, tunnel_name, tunnel_names;
          [chrs, tunnel_names, text] = probe;
          tnl = new TUNNELTEXT.Tunneltext(chrs);
//.....................................................................................................
          for (j = 0, len1 = tunnel_names.length; j < len1; j++) {
            tunnel_name = tunnel_names[j];
            tunnel_factory = TUNNELTEXT.tunnels[tunnel_name];
            tnl.add_tunnel(tunnel_factory);
          }
          //.....................................................................................................
          result = tnl.reveal(tnl.hide(text));
          return resolve(result);
        });
      });
    }
    return done();
  };

  //-----------------------------------------------------------------------------------------------------------
  this["tunnels: hiding, reverting"] = async function(T, done) {
    var error, i, len, matcher, probe, probes_and_matchers;
    probes_and_matchers = [[['abcde', ['backslash'], 'abcdefghxyz'], 'abcdefghxyz', null], [['abcde', ['backslash'], 'abc\\defghxyz'], 'abcdefghxyz', null], [['abcde', ['backslash', 'htmlish'], 'abc\\def <tag/> ghxyz'], 'abcdef <tag/> ghxyz', null]];
//.........................................................................................................
// [['abc',null],null,'not a valid tunneltext_chrs',]
    for (i = 0, len = probes_and_matchers.length; i < len; i++) {
      [probe, matcher, error] = probes_and_matchers[i];
      await T.perform(probe, matcher, error, function() {
        return new Promise(function(resolve, reject) {
          var chrs, j, len1, result, text, tnl, tunnel_factory, tunnel_name, tunnel_names;
          [chrs, tunnel_names, text] = probe;
          tnl = new TUNNELTEXT.Tunneltext(chrs);
//.....................................................................................................
          for (j = 0, len1 = tunnel_names.length; j < len1; j++) {
            tunnel_name = tunnel_names[j];
            tunnel_factory = TUNNELTEXT.tunnels[tunnel_name];
            tnl.add_tunnel(tunnel_factory);
          }
          //.....................................................................................................
          result = tnl.revert(tnl.hide(text));
          return resolve(result);
        });
      });
    }
    return done();
  };

  //###########################################################################################################
  if (module.parent == null) {
    test(this);
  }

  // test @[ "xxx" ]

}).call(this);

//# sourceMappingURL=main.test.js.map
