// Generated by CoffeeScript 2.4.1
(function() {
  "use strict";
  var CND, Multimix, alert, badge, debug, declare, echo, esc_re, help, info, isa, jr, log, rainbow, ref, rpr, size_of, type_of, types, urge, validate, warn, whisper,
    boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'TIMETUNNEL/MAIN';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  rainbow = CND.rainbow.bind(CND);

  ({jr} = CND);

  Multimix = require('multimix');

  //...........................................................................................................
  types = require('./types');

  ({isa, validate, declare, size_of, type_of} = types);

  //-----------------------------------------------------------------------------------------------------------
  /* from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions */
  esc_re = function(text) {
    return text.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
  };

  //===========================================================================================================
  ref = this.Timetunnel = class Timetunnel extends Multimix {
    // @extend   object_with_class_properties
    // @include require './cataloguing'

    //---------------------------------------------------------------------------------------------------------
    constructor(chrs = null) {
      var idx;
      super();
      //---------------------------------------------------------------------------------------------------------
      this._hide_pattern = this._hide_pattern.bind(this);
      //---------------------------------------------------------------------------------------------------------
      this._reveal_tunneled = this._reveal_tunneled.bind(this);
      if (chrs == null) {
        chrs = '\x10\x11\x12\x13\x14';
      }
      validate.timetunnel_chrs(chrs);
      this.chrs = Array.from(chrs);
      //.......................................................................................................
      this.chr_count = this.chrs.length;
      this.delta = (this.chr_count + 1) / 2 - 1;
      this.master = this.chrs[this.chr_count - this.delta - 1];
      this.meta_chr_patterns = (function() {
        var i, ref1, results;
        results = [];
        for (idx = i = 0, ref1 = this.delta; (0 <= ref1 ? i <= ref1 : i >= ref1); idx = 0 <= ref1 ? ++i : --i) {
          results.push(RegExp(`${esc_re(this.chrs[idx])}`, "gu"));
        }
        return results;
      }).call(this);
      this.target_seq_chrs = (function() {
        var i, ref1, results;
        results = [];
        for (idx = i = 0, ref1 = this.delta; (0 <= ref1 ? i <= ref1 : i >= ref1); idx = 0 <= ref1 ? ++i : --i) {
          results.push(`${this.master}${this.chrs[idx + this.delta]}`);
        }
        return results;
      }).call(this);
      this.target_seq_patterns = (function() {
        var i, ref1, results;
        results = [];
        for (idx = i = 0, ref1 = this.delta; (0 <= ref1 ? i <= ref1 : i >= ref1); idx = 0 <= ref1 ? ++i : --i) {
          results.push(RegExp(`${esc_re(this.target_seq_chrs[idx])}`, "gu"));
        }
        return results;
      }).call(this);
      this.cloaked = this.chrs.slice(0, this.delta);
      this.reveal_pattern = RegExp(`${esc_re(this.cloaked[0])}([0-9]+)${esc_re(this.cloaked[1])}`, "gu");
      this.tunnels = [];
      this._cache = [];
      this._index = {};
    }

    //---------------------------------------------------------------------------------------------------------
    hide(text) {
      var R, i, idx, j, len, pattern, ref1, ref2;
      R = text;
      for (idx = i = ref1 = this.delta; i >= 0; idx = i += -1) {
        R = R.replace(this.meta_chr_patterns[idx], this.target_seq_chrs[idx]);
      }
      ref2 = this.tunnels;
      for (j = 0, len = ref2.length; j < len; j++) {
        pattern = ref2[j];
        R = this._hide_pattern(pattern, R);
      }
      return R;
    }

    //---------------------------------------------------------------------------------------------------------
    reveal(text) {
      var R, i, idx, ref1;
      R = text;
      R = this._reveal_tunneled(R);
      for (idx = i = 0, ref1 = this.delta; i <= ref1; idx = i += +1) {
        R = R.replace(this.target_seq_patterns[idx], this.chrs[idx]);
      }
      return R;
    }

    _hide_pattern(pattern, text) {
      var R;
      boundMethodCheck(this, ref);
      R = text;
      R = R.replace(pattern, (_, $1) => {
        var cache_idx;
        cache_idx = this._store($1);
        return `${this.cloaked[0]}${cache_idx}${this.cloaked[1]}`;
      });
      return R;
    }

    _reveal_tunneled(text) {
      var R;
      boundMethodCheck(this, ref);
      R = text;
      while ((R.match(this.reveal_pattern)) != null) {
        R = R.replace(this.reveal_pattern, (_, $1) => {
          return this._retrieve(parseInt($1, 10));
        });
      }
      return R;
    }

    //---------------------------------------------------------------------------------------------------------
    add_tunnel(pattern) {
      validate.timetunnel_tunnel_pattern(pattern);
      return this.tunnels.push(pattern);
    }

    //=========================================================================================================
    // CACHE
    //---------------------------------------------------------------------------------------------------------
    _store(x) {
      var R;
      if ((R = this._index[x]) != null) {
        return R;
      }
      R = this._cache.length;
      this._index[x] = R;
      this._cache.push(x);
      return R;
    }

    //---------------------------------------------------------------------------------------------------------
    _retrieve(idx) {
      if (!((idx >= 0) && (idx < this._cache.length))) {
        throw new Error(`Âµ44292 index out of bounds, got ${rpr(idx)}`);
      }
      return this._cache[idx];
    }

  };

  //===========================================================================================================
  // TUNNELS
  //-----------------------------------------------------------------------------------------------------------
  this.tunnels = {
    remove_backslash: /\\(.)/gu,
    keep_backslash: /(\\.)/gu,
    htmlish: /(<[^>]*?>)/gu
  };

}).call(this);

//# sourceMappingURL=main.js.map
