// Generated by CoffeeScript 2.4.1
(function() {
  "use strict";
  var CND, Multimix, alert, badge, debug, declare, echo, esc_re, help, info, isa, jr, log, rainbow, rpr, size_of, tnl, type_of, types, urge, validate, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'TUNNELTEXT/MAIN';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  rainbow = CND.rainbow.bind(CND);

  ({jr} = CND);

  Multimix = require('multimix');

  //...........................................................................................................
  types = require('./types');

  ({isa, validate, declare, size_of, type_of} = types);

  //-----------------------------------------------------------------------------------------------------------
  /* from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions */
  esc_re = function(text) {
    return text.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
  };

  //===========================================================================================================
  this.Tunneltext = class Tunneltext extends Multimix {
    // @extend   object_with_class_properties
    // @include require './cataloguing'
    // @include require './sizing'
    // @include require './declaring'

    //---------------------------------------------------------------------------------------------------------
    constructor(chrs = '\x10\x11\x12\x13\x14') {
      var idx;
      super();
      validate.tunneltext_chrs(chrs);
      this.chrs = Array.from(chrs);
      //.......................................................................................................
      this.chr_count = this.chrs.length;
      this.delta = (this.chr_count + 1) / 2 - 1;
      this.master = this.chrs[this.chr_count - this.delta - 1];
      this.meta_chr_patterns = (function() {
        var i, ref, results;
        results = [];
        for (idx = i = 0, ref = this.delta; (0 <= ref ? i <= ref : i >= ref); idx = 0 <= ref ? ++i : --i) {
          results.push(RegExp(`${esc_re(this.chrs[idx])}`, "gu"));
        }
        return results;
      }).call(this);
      this.target_seq_chrs = (function() {
        var i, ref, results;
        results = [];
        for (idx = i = 0, ref = this.delta; (0 <= ref ? i <= ref : i >= ref); idx = 0 <= ref ? ++i : --i) {
          results.push(`${this.master}${this.chrs[idx + this.delta]}`);
        }
        return results;
      }).call(this);
      this.target_seq_patterns = (function() {
        var i, ref, results;
        results = [];
        for (idx = i = 0, ref = this.delta; (0 <= ref ? i <= ref : i >= ref); idx = 0 <= ref ? ++i : --i) {
          results.push(RegExp(`${esc_re(this.target_seq_chrs[idx])}`, "gu"));
        }
        return results;
      }).call(this);
      this.cloaked = this.chrs.slice(0, this.delta);
      debug('µhd', '@delta:                ', rpr(this.delta));
      debug('µhd', '@master:               ', rpr(this.master));
      debug('µhd', '@meta_chr_patterns:    ', rpr(this.meta_chr_patterns));
      debug('µhd', '@target_seq_chrs:      ', rpr(this.target_seq_chrs));
      debug('µhd', '@target_seq_patterns:  ', rpr(this.target_seq_patterns));
      debug('µhd', '@cloaked:              ', rpr(this.cloaked));
    }

    //---------------------------------------------------------------------------------------------------------
    hide(text) {
      var R, i, idx, ref;
      R = text;
      for (idx = i = ref = this.delta; i >= 0; idx = i += -1) {
        R = R.replace(this.meta_chr_patterns[idx], this.target_seq_chrs[idx]);
      }
      return R;
    }

    //---------------------------------------------------------------------------------------------------------
    reveal(text) {
      var R, i, idx, ref;
      R = text;
      for (idx = i = 0, ref = this.delta; i <= ref; idx = i += +1) {
        R = R.replace(this.target_seq_patterns[idx], this.chrs[idx]);
      }
      return R;
    }

  };

  tnl = new this.Tunneltext('abcde');

  debug('µ37ujs', tnl);

  debug('µ37ujs', tnl.hide('abcdefghxyz'));

}).call(this);

//# sourceMappingURL=main.js.map
