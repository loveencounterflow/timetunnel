{
  "version": 3,
  "file": "integer-codec.js",
  "sourceRoot": "..",
  "sources": [
    "src/integer-codec.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n\"use strict\"\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'TIMETUNNEL/INTEGER-CODEC'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n\n###\n\nthx to https://rot47.net/base.html\nconvert.js\nhttp://rot47.net\nhttps://helloacm.com\nhttp://codingforspeed.com\nDr Zhihua Lai\n\n###\n\n# BASE2  = \"01\"\n# BASE8  = \"01234567\"\n# BASE10 = \"0123456789\"\n# BASE16 = \"0123456789abcdef\"\n# BASE32 = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n# BASE62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n# BASE75 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.,!=-*(){}[]\"\n\n#-----------------------------------------------------------------------------------------------------------\nvalidate_distinctive_nonempty_chrs = ( x ) ->\n  validate.text x\n  R = Array.from x\n  ### TAINT implement intertype.validate() with custom test, custom message ###\n  unless ( R.length > 1 )\n    throw new Error \"µ12009 expected a text with two or more characters, got #{rpr x}\"\n  unless ( new Set R ).size is R.length\n    throw new Error \"µ12009 expected a text with two or more distinct characters, got #{rpr x}\"\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nvalidate_is_subset = ( x, y ) ->\n  unless ( x.every ( xx ) -> xx in y )\n    throw new Error \"µ33344 number contains illegal digits: #{rpr x}, alphabet #{rpr y}\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_convert = ( src, srctable, desttable ) ->\n  srctable  = validate_distinctive_nonempty_chrs srctable\n  desttable = validate_distinctive_nonempty_chrs desttable\n  srclen    = srctable.length\n  destlen   = desttable.length\n  validate.nonempty_text src\n  src       = Array.from src\n  validate_is_subset src, srctable\n  #.........................................................................................................\n  # Remove leading zeros except the last one:\n  src.shift() while ( src.length > 1 ) and ( src[ 0 ] is srctable[ 0 ] )\n  #.........................................................................................................\n  # If srctable equals desttable and leading zeros have been removed, src already contains result: ###\n  return src.join '' if ( srctable is desttable )\n  #.........................................................................................................\n  # first convert to base 10\n  val       = 0\n  numlen    = src.length\n  #.........................................................................................................\n  for i in [ 0 ... numlen ]\n    val = val * srclen + srctable.indexOf src[ i ]\n  #.........................................................................................................\n  if val < 0\n    return 0\n  #.........................................................................................................\n  # then covert to any base\n  r   = val %% destlen\n  R   = desttable[ r ]\n  q   = val // destlen\n  while q isnt 0\n    r   = q %% destlen\n    q   = q // destlen\n    R = ( desttable[ r ] ) + R\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@encode = ( n, alphabet ) ->\n  validate.count n\n  return @_convert \"#{n}\", '0123456789', alphabet\n\n#-----------------------------------------------------------------------------------------------------------\n@decode = ( text, alphabet ) ->\n  return parseInt ( @_convert text, alphabet, '0123456789' ), 10\n\n\n\n"
  ]
}