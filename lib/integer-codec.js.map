{
  "version": 3,
  "file": "integer-codec.js",
  "sourceRoot": "..",
  "sources": [
    "src/integer-codec.coffee"
  ],
  "names": [],
  "mappings": ";AAIA;EAAA;AAAA,MAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA,EAAA,OAAA;IAAA,2DAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAd5B;;;EAgBA,KAAA,GAA4B,OAAA,CAAQ,SAAR;;EAC5B,CAAA,CAAE,GAAF,EACE,QADF,EAEE,OAFF,EAGE,OAHF,EAIE,OAJF,CAAA,GAI4B,KAJ5B,EAjBA;;;;;;;;;;;;;;;;;;;;;EA2CA,IAAC,CAAA,OAAD,GAAW,QAAA,CAAE,GAAF,EAAO,QAAP,EAAiB,SAAjB,CAAA;AACT,QAAA,CAAA,EAAA,OAAA,EAAA,CAAA,EAAA,CAAA,EAAA,MAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,MAAA,EAAA;IAAA,MAAA,GAAU,QAAQ,CAAC;IACnB,OAAA,GAAU,SAAS,CAAC,OADpB;;IAGA,GAAA,GAAU;IACV,MAAA,GAAU,GAAG,CAAC,OAJd;;IAMA,KAAS,iFAAT;MACE,GAAA,GAAM,GAAA,GAAM,MAAN,GAAe,QAAQ,CAAC,OAAT,CAAiB,GAAG,CAAC,MAAJ,CAAW,CAAX,CAAjB;IADvB,CANA;;IASA,IAAG,GAAA,GAAM,CAAT;AACE,aAAO,EADT;KATA;;IAYA,IAAK,OAAA,KAAW,CAAhB;AACE,aAAO,SAAW,CAAA,CAAA,CAAG,CAAC,MAAf,CAAuB,GAAvB,EADT;KAZA;;;IAgBA,CAAA,UAAM,KAAO;IACb,CAAA,GAAM,SAAS,CAAC,MAAV,CAAiB,CAAjB;IACN,CAAA,cAAM,MAAO;AACb,WAAM,CAAA,KAAO,CAAb;MACE,CAAA,UAAM,GAAK;MACX,CAAA,cAAM,IAAK;MACX,CAAA,GAAI,CAAE,SAAS,CAAC,MAAV,CAAiB,CAAjB,CAAF,CAAA,GAAyB;IAH/B,CAnBA;;AAwBA,WAAO;EAzBE;;EA4BX,IAAC,CAAA,cAAD,GAAkB,QAAA,CAAE,CAAF,EAAK,QAAL,CAAA;IAChB,QAAQ,CAAC,mBAAT,CAA6B,CAA7B;WACA,QAAQ,CAAC,gCAAT,CAA0C,QAA1C;EAFgB;AAvElB",
  "sourcesContent": [
    "\n\n\n\n\"use strict\"\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'TIMETUNNEL/INTEGER-CODEC'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n\n###\n\nthx to https://rot47.net/base.html\nconvert.js\nhttp://rot47.net\nhttps://helloacm.com\nhttp://codingforspeed.com\nDr Zhihua Lai\n\n###\n\n# BASE2  = \"01\"\n# BASE8  = \"01234567\"\n# BASE10 = \"0123456789\"\n# BASE16 = \"0123456789abcdef\"\n# BASE32 = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n# BASE62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n# BASE75 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.,!=-*(){}[]\"\n\n#-----------------------------------------------------------------------------------------------------------\n@convert = ( src, srctable, desttable ) ->\n  srclen  = srctable.length\n  destlen = desttable.length\n  # first convert to base 10\n  val     = 0\n  numlen  = src.length\n  #.........................................................................................................\n  for i in [ 0 ... numlen ]\n    val = val * srclen + srctable.indexOf src.charAt i\n  #.........................................................................................................\n  if val < 0\n    return 0\n  #.........................................................................................................\n  if ( destlen is 1 )\n    return desttable[ 0 ].repeat( val )\n  #.........................................................................................................\n  # then covert to any base\n  r   = val %% destlen\n  R   = desttable.charAt(r)\n  q   = val // destlen\n  while q isnt 0\n    r   = q %% destlen\n    q   = q // destlen\n    R = ( desttable.charAt r ) + R\n  #.........................................................................................................\n  return R\n\n\n@encode_integer = ( n, alphabet ) ->\n  validate.nonnegative_integer n\n  validate.timetunnel_integercodec_alphabet alphabet\n\n"
  ]
}