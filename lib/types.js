// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var CND, Intertype, alert, badge, debug, help, info, intertype, jr, rpr, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'TUNNELTEXT/TYPES';

  debug = CND.get_logger('debug', badge);

  alert = CND.get_logger('alert', badge);

  whisper = CND.get_logger('whisper', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  info = CND.get_logger('info', badge);

  jr = JSON.stringify;

  Intertype = (require('intertype')).Intertype;

  intertype = new Intertype(module.exports);

  //-----------------------------------------------------------------------------------------------------------
  this.declare('tunneltext_chrs', {
    tests: {
      "x is a text": function(x) {
        return this.isa.text(x);
      },
      "x has 5 distinct codepoints": function(x) {
        return (new Set(Array.from(x))).size === 5;
      }
    }
  });

  //-----------------------------------------------------------------------------------------------------------
  this.declare('tunneltext_tunnel_factory', {
    tests: {
      "x is a function": function(x) {
        return this.isa.function(x);
      },
      "arity of x is 1": function(x) {
        return x.length === 1;
      }
    }
  });

  //-----------------------------------------------------------------------------------------------------------
  this.declare('tunneltext_tunnel', {
    tests: {
      "x is an object": function(x) {
        return this.isa.object(x);
      },
      "x.name is a nonempty text": function(x) {
        return this.isa.nonempty_text(x.name);
      },
      "x.hide is a function": function(x) {
        return this.isa.function(x.hide);
      },
      "x.reveal is a function": function(x) {
        return this.isa.function(x.reveal);
      },
      "x.remove may be a function": function(x) {
        return (x.remove == null) || (this.isa.function(x.remove));
      },
      "arity of x.hide is 1": function(x) {
        return x.hide.length === 1;
      },
      "arity of x.reveal is 1": function(x) {
        return x.reveal.length === 1;
      },
      "arity of x.remove is 1": function(x) {
        return (x.remove == null) || (x.remove.length === 1);
      }
    }
  });

}).call(this);

//# sourceMappingURL=types.js.map
