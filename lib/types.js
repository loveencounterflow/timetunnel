// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var CND, Intertype, alert, badge, debug, help, info, intertype, jr, rpr, urge, warn, whisper,
    indexOf = [].indexOf;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'TIMETUNNEL/TYPES';

  debug = CND.get_logger('debug', badge);

  alert = CND.get_logger('alert', badge);

  whisper = CND.get_logger('whisper', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  info = CND.get_logger('info', badge);

  jr = JSON.stringify;

  Intertype = (require('intertype')).Intertype;

  intertype = new Intertype(module.exports);

  //-----------------------------------------------------------------------------------------------------------
  this.declare('timetunnel_distinctive_nonempty_chrs', {
    tests: {
      "x is a text": function(x) {
        return this.isa.text(x);
      },
      "x has 1 or more distinct codepoints": function(x) {
        var size;
        size = this.size_of(new Set(Array.from(x)));
        return (size > 0) && (size === (this.size_of(x, 'codepoints')));
      }
    }
  });

  //-----------------------------------------------------------------------------------------------------------
  this.declare('timetunnel_chrs', {
    tests: {
      "x is a text": function(x) {
        return this.isa.text(x);
      },
      "x has 5 distinct codepoints": function(x) {
        return (new Set(Array.from(x))).size === 5;
      }
    }
  });

  //-----------------------------------------------------------------------------------------------------------
  this.declare('timetunnel_tunnel_pattern', {
    tests: {
      "x is a regex": function(x) {
        return this.isa.regex(x);
      },
      "x has global flag": function(x) {
        return indexOf.call(x.flags, 'g') >= 0;
      }
    }
  });

}).call(this);

//# sourceMappingURL=types.js.map
