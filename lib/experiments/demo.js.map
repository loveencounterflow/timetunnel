{
  "version": 3,
  "file": "demo.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/demo.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\"use strict\"\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'TIMETUNNEL/MAIN'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n\n#--------------------------------------------------------\n# Create a TimeTunnel instance:\n\nlog             = console.log\nrpr             = ( require 'util' ).inspect\nTIMETUNNEL      = require '../..'\n# TIMETUNNEL      = require 'timetunnel'\n# tnl.add_tunnel TIMETUNNEL.tunnels.remove_backslash\n# tnl.add_tunnel TIMETUNNEL.tunnels.htmlish\n\n#--------------------------------------------------------\nmodify = ( text ) ->\n  return text.replace /[0-9]+/g, ( $0 ) ->\n    return '' + ( parseInt $0, 10 ) * 12\n\n#--------------------------------------------------------\noriginal_text = \"abcde A plain number 123, two bracketed ones: {123}, {124}\"\n\n#--------------------------------------------------------\n# Hide 'offending' original_text,\n# process it,\n# finally recover tunneled parts:\n\ntransform = ( tnl, original_text, message ) ->\n  tunneled_text   = tnl.hide    original_text\n  modified_text   = modify      tunneled_text\n  uncovered_text  = tnl.reveal  modified_text\n  log '----------------------------'\n  log message\n  log '(1)', rpr original_text\n  log '(2)', rpr tunneled_text\n  log '(3)', rpr modified_text\n  log '(4)', rpr uncovered_text\n  return uncovered_text\n\ntnl = new TIMETUNNEL.Timetunnel 'abCDe'\ntnl.add_tunnel ///   \\{ ( [0-9]+ ) \\}   ///gu\ntransform tnl, original_text, \"brackets not in group, removed\"\n\ntnl = new TIMETUNNEL.Timetunnel 'abCDe'\ntnl.add_tunnel /// ( \\{   [0-9]+   \\} ) ///gu\ntransform tnl, original_text, \"brackets in group, not removed\"\n\ntnl = new TIMETUNNEL.Timetunnel 'abCDe'\ntnl.add_tunnel /// \\{   [0-9]+   \\} ///gu\ntransform tnl, original_text, \"no group, equivalent to all grouped\"\n\n\ncs = [\n  'abcde'\n  'abCDE'\n  'abCDe'\n  'ABcde'\n  '()CDE' ]\ntext = 'abcdeABCDE-CC-CD'\nfor chrs in cs\n  tnl = new TIMETUNNEL.Timetunnel chrs\n  log ( rpr chrs ), ( rpr text ), '->', ( rpr tnl.hide text )\n\n\n\n"
  ]
}